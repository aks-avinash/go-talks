Benchmarks
measurement, storage & analysis

Mike Kabischev
Software Engineer, Juno
kabischev@gmail.com
@mkabischev

* Not about how to write benchmarks

.image images/sorry.png 310 _

* Benchmark Data Format

* Benchmark Data Format

.link https://github.com/golang/proposal/blob/master/design/14313-benchmark-format.md

    ➜  go test -run=NONE -bench=. -benchmem compress/flate
.code benchmarks/example.bench

* Benchmark Data Format: configuration lines

A configuration line is a key-value pair of the form

    key: value

The interpretation of a key/value pair is up to tooling, but the key/value pair is considered to describe all benchmark results that follow, until overwritten by a configuration line with the same key.

    commit: 7cd9055
    commit-time: 2016-02-11T13:25:45-0500
    goos: darwin
    goarch: amd64
    cpu: Intel(R) Core(TM) i7-4980HQ CPU @ 2.80GHz
    cpu-count: 8
    cpu-physical-count: 4
    os: Mac OS X 10.11.3
    mem: 16 GB

* Benchmark Data Format: results

    BenchmarkDecode/Digits/Speed-8  100  14084398 ns/op  71.00 MB/s   44473 B/op   73 allocs/op
A result line has the general form

    <name> <iterations> <value> <unit> [<value> <unit>...]

- benchmark name
- number of iterations 
- value units

A value's unit string is expected to specify not only the measurement unit but also, as needed, a description of what is being measured. Tooling can expect that the unit strings are identical for all runs to be compared.

* Benchmark processors

* Benchcmp

    ➜ go get golang.org/x/tools/benchcmp

The benchcmp command displays performance changes between benchmarks.

Benchcmp parses the output of two 'go test' benchmark runs, correlates the results per benchmark, and displays the deltas.

Benchcmp summarizes and displays the performance changes, in a format like this:

    ➜ benchcmp old.txt new.txt
    benchmark           old ns/op     new ns/op     delta
    BenchmarkConcat     523           68.6          -86.88%

    benchmark           old allocs     new allocs     delta
    BenchmarkConcat     3              1              -66.67%

    benchmark           old bytes     new bytes     delta
    BenchmarkConcat     80            48            -40.00%

* Benchstat

    ➜ go get golang.org/x/perf/cmd/benchstat

Benchstat computes and compares statistics about benchmarks. It's more statistically valid successor benchstat.

For each different benchmark listed in an input file, benchstat computes the mean, minimum, and maximum run time, after removing outliers using the interquartile range rule.

If invoked on a single input file, benchstat prints the per-benchmark statistics for that file.

If invoked on a pair of input files, benchstat adds to the output a column showing the statistics from the second file and a column showing the percent change in mean from the first to the second file. 

* Benchstat: single input

.code benchmarks/benchstat.old
    ➜ benchstat results
    name        time/op
    GobEncode     13.6ms ± 1%
    JSONEncode    32.1ms ± 1%

    name        speed
    GobEncode   56.4MB/s ± 1%
    JSONEncode  60.4MB/s ± 1%

* Benchstat: two inputs
    ➜ benchstat results.old results.new
    name        old time/op    new time/op    delta
    GobEncode     13.6ms ± 1%    11.8ms ± 1%  -13.31%  
    JSONEncode    32.1ms ± 1%    31.8ms ± 1%     ~     

    name        old speed      new speed      delta
    GobEncode   56.4MB/s ± 1%  65.1MB/s ± 1%  +15.36%  
    JSONEncode  60.4MB/s ± 1%  61.1MB/s ± 2%     ~   

* golang.org/x/perf

* golang.org/x/perf

Set of tools and packages related to performance measurement, storage & analysis.

- *benchstat* - computes and compares statistics about benchmarks.
- *storage* - benchmarks result storage system.
- *benchsave* - a tool for publishing benchmark results.
- *analysis* - benchmark result analysis system.

* golang.org/x/perf

.image images/perf.png _ 800

* benchsave

    ➜ benchsave -h
    Usage of benchsave:
        benchsave [flags] file...
    -header file
            insert file at the beginning of each uploaded file
    -server url
            upload benchmarks to server at url (default "https://perfdata.golang.org")
    -v	print verbose log messages

Upload results:

    ➜ go test -run=NONE -bench=. -benchmem > results.txt
    ➜ benchsave results.txt

* benchsave header

Insert additional configuration lines. 

    ➜ go get github.com/mkabischev/benchcontext
    ➜ benchcontext

    # generated by benchcontext
    by: kabischev@gojuno.com
    branch: master
    commit: 63a804bd7b1e7693e14f83434ef8b223d5afd4e8
    commit-time: 2018-03-16T12:59:50+03:00

* Storage API

- *POST* */upload* uploads results to storage as multipart/form-data contents.
- *GET* */uploads?q=$search&extra_label=$label&limit=$limit* returns a list of the most recent uploads that match the search string.
- *GET* */search?q=$search* return a text file with synthesized benchmark results matching the search.


* Storage

Out of box can be run:

- in Google App Engine
- locally using sqlite & local FS

But provides interfaces to support any database & file system:

.code benchmarks/app.g

* Go performance dashboard

.image images/dashboard2.png _ 1000

* Dashboard: details

.image images/results2.png _ 1000

* Continuous analysis

.image images/flow.png _ 800

